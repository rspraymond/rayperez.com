import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest'
import TableOfContents from './TableOfContents'
import { AllTheProviders } from '../test-utils/TestProviders'

// Mock scrollIntoView
const mockScrollIntoView = vi.fn()
Object.defineProperty(Element.prototype, 'scrollIntoView', {
  value: mockScrollIntoView,
  writable: true,
})

describe('TableOfContents', () => {
  beforeEach(() => {
    // Create mock headings in the document
    document.body.innerHTML = `
      <div>
        <h3>Key Takeaways</h3>
        <h5>First Section</h5>
        <h5>First Subsection</h5>
        <h5>Second Section</h5>
        <h5>Second Subsection</h5>
      </div>
    `
  })

  afterEach(() => {
    document.body.innerHTML = ''
    vi.clearAllMocks()
  })

  it('renders table of contents when sufficient headings exist', async () => {
    render(
      <AllTheProviders>
        <TableOfContents />
      </AllTheProviders>,
    )

    await waitFor(() => {
      expect(screen.getByText('Table of Contents')).toBeInTheDocument()
    })

    // Check for list items within the table of contents specifically
    const tocList = screen.getByRole('list')
    expect(tocList).toBeInTheDocument()

    // Use getAllByText to handle multiple elements with same text
    const firstSections = screen.getAllByText('First Section')
    const firstSubsections = screen.getAllByText('First Subsection')
    const secondSections = screen.getAllByText('Second Section')
    const secondSubsections = screen.getAllByText('Second Subsection')

    // Should have both the heading in DOM and in TOC
    expect(firstSections).toHaveLength(2)
    expect(firstSubsections).toHaveLength(2)
    expect(secondSections).toHaveLength(2)
    expect(secondSubsections).toHaveLength(2)

    // Should not show "Key Takeaways" in TOC
    expect(screen.queryByText('Key Takeaways')).toBeInTheDocument() // Only in DOM, not in TOC
  })

  it('renders when no headings exist and returns null', async () => {
    // Create document with no relevant headings
    document.body.innerHTML = `
      <div>
        <h1>Main Title</h1>
        <h2>Subtitle</h2>
        <p>Some content</p>
      </div>
    `

    render(
      <AllTheProviders>
        <TableOfContents />
      </AllTheProviders>,
    )

    await waitFor(() => {
      expect(screen.queryByText('Table of Contents')).not.toBeInTheDocument()
    })
  })

  it('toggles expanded state when header is clicked', async () => {
    render(
      <AllTheProviders>
        <TableOfContents />
      </AllTheProviders>,
    )

    await waitFor(() => {
      expect(screen.getByText('Table of Contents')).toBeInTheDocument()
    })

    // Initially expanded - list should be visible
    const tocList = screen.getByRole('list')
    expect(tocList).toBeInTheDocument()

    // Should have toggle button
    const toggleButton = screen.getByLabelText('collapse table of contents')
    expect(toggleButton).toBeInTheDocument()

    // Click to collapse
    fireEvent.click(screen.getByText('Table of Contents'))

    await waitFor(() => {
      expect(screen.queryByRole('list')).not.toBeInTheDocument()
    })

    // Click to expand again
    fireEvent.click(screen.getByText('Table of Contents'))

    await waitFor(() => {
      expect(screen.getByRole('list')).toBeInTheDocument()
    })
  })

  it('scrolls to heading when list item is clicked', async () => {
    render(
      <AllTheProviders>
        <TableOfContents />
      </AllTheProviders>,
    )

    await waitFor(() => {
      expect(screen.getByText('Table of Contents')).toBeInTheDocument()
    })

    // Wait for TOC to extract headings and generate IDs
    await waitFor(() => {
      const buttons = screen.getAllByRole('button')
      expect(buttons.length).toBeGreaterThan(0) // List item buttons
    })

    // Click on a list item button (not just the text)
    const listItemButtons = screen
      .getAllByRole('button')
      .filter((btn) => btn.textContent?.includes('First Section'))

    if (listItemButtons.length > 0) {
      fireEvent.click(listItemButtons[0])

      expect(mockScrollIntoView).toHaveBeenCalledWith({
        behavior: 'smooth',
        block: 'start',
      })
    }
  })

  it('generates IDs for headings without them', async () => {
    render(
      <AllTheProviders>
        <TableOfContents />
      </AllTheProviders>,
    )

    await waitFor(() => {
      expect(screen.getByText('Table of Contents')).toBeInTheDocument()
    })

    // Wait for the timer to complete and IDs to be generated
    await waitFor(
      () => {
        // Check that headings have IDs generated by the component
        const headingWithGeneratedId = document.querySelector('[id^="heading-"]')
        expect(headingWithGeneratedId).toBeInTheDocument()

        // Verify at least some headings got IDs
        const allHeadings = document.querySelectorAll('h3, h5')
        const headingsWithIds = Array.from(allHeadings).filter((h) => h.id)
        expect(headingsWithIds.length).toBeGreaterThan(0)
      },
      { timeout: 1000 },
    )
  })

  it('has proper accessibility attributes', async () => {
    render(
      <AllTheProviders>
        <TableOfContents />
      </AllTheProviders>,
    )

    await waitFor(() => {
      expect(screen.getByText('Table of Contents')).toBeInTheDocument()
    })

    // Check for proper list structure
    const tocList = screen.getByRole('list')
    expect(tocList).toBeInTheDocument()

    // Check that list items are clickable buttons
    const listItems = screen.getAllByRole('button')
    expect(listItems.length).toBeGreaterThan(1) // Toggle button + list item buttons

    // Check for proper accessibility labels
    const toggleButton = screen.getByLabelText('collapse table of contents')
    expect(toggleButton).toBeInTheDocument()
  })
})
