name: Version and Tag

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type (major, minor, patch)'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: 'patch'

jobs:
  version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Get current version
        id: current_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Determine version bump type
        id: version_type
        run: |
          # Use manual input if workflow_dispatch, otherwise determine from commits
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "type=${{ github.event.inputs.version_type }}" >> $GITHUB_OUTPUT
          else
            # Get commits since last tag
            last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -z "$last_tag" ]; then
              commits=$(git log --pretty=format:"%s" --no-merges)
            else
              commits=$(git log ${last_tag}..HEAD --pretty=format:"%s" --no-merges)
            fi
            
            # Check for breaking changes
            if echo "$commits" | grep -qE "(BREAKING CHANGE|BREAKING-CHANGE)" || echo "$commits" | grep -q "!:"; then
              echo "type=major" >> $GITHUB_OUTPUT
            # Check for features
            elif echo "$commits" | grep -q "^feat"; then
              echo "type=minor" >> $GITHUB_OUTPUT
            # Default to patch for fixes and other changes
            else
              echo "type=patch" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Calculate new version
        id: new_version
        run: |
          current="${{ steps.current_version.outputs.version }}"
          type="${{ steps.version_type.outputs.type }}"

          IFS='.' read -r major minor patch <<< "$current"

          case "$type" in
            "major")
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            "minor")
              minor=$((minor + 1))
              patch=0
              ;;
            "patch")
              patch=$((patch + 1))
              ;;
          esac

          new_version="$major.$minor.$patch"
          echo "version=$new_version" >> $GITHUB_OUTPUT
          echo "type=$type" >> $GITHUB_OUTPUT

      - name: Check if version should be bumped
        id: should_bump
        run: |
          # Skip version bump if:
          # 1. Last commit is already a version bump
          # 2. No conventional commits found
          last_commit=$(git log -1 --pretty=format:"%s")
          if echo "$last_commit" | grep -q "^chore: release version"; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "reason=Last commit is already a version bump" >> $GITHUB_OUTPUT
          elif [ "${{ steps.version_type.outputs.type }}" = "patch" ] && ! git log $(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD~10")..HEAD --pretty=format:"%s" --no-merges | grep -qE "^(feat|fix|perf)"; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "reason=No releasable changes found" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Update package.json version
        if: steps.should_bump.outputs.skip == 'false'
        run: npm version ${{ steps.new_version.outputs.version }} --no-git-tag-version

      - name: Generate Changelog
        if: steps.should_bump.outputs.skip == 'false'
        run: npm run changelog
        env:
          VERSION: ${{ steps.new_version.outputs.version }}

      - name: Commit changes
        if: steps.should_bump.outputs.skip == 'false'
        run: |
          git add package.json package-lock.json CHANGELOG.md
          git commit -m "chore: release version ${{ steps.new_version.outputs.version }}"

      - name: Create and push tag
        if: steps.should_bump.outputs.skip == 'false'
        run: |
          git tag "v${{ steps.new_version.outputs.version }}"
          git push origin HEAD:main --tags

      - name: Create GitHub Release
        if: steps.should_bump.outputs.skip == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.new_version.outputs.version }}
          name: Release v${{ steps.new_version.outputs.version }}
          body: |
            Version ${{ steps.new_version.outputs.version }} (${{ steps.new_version.outputs.type }} release)
            
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
          draft: false
          prerelease: false

      - name: Log skip reason
        if: steps.should_bump.outputs.skip == 'true'
        run: |
          echo "Skipping version bump: ${{ steps.should_bump.outputs.reason }}"
